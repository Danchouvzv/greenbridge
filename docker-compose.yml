version: '3.8'

services:
  # Django Application
  web:
    build: 
      context: .
      dockerfile: ./docker/Dockerfile
    image: greenbridge_web:latest
    restart: unless-stopped
    volumes:
      - ./:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file: ./.env
    depends_on:
      - db
      - redis
    command: gunicorn greenbridge.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 4
    networks:
      - greenbridge_network
    
  # Celery Worker
  celery:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    image: greenbridge_celery:latest
    restart: unless-stopped
    command: celery -A greenbridge worker -l info
    volumes:
      - ./:/app
    env_file: ./.env
    depends_on:
      - db
      - redis
    networks:
      - greenbridge_network

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    image: greenbridge_celery_beat:latest
    restart: unless-stopped
    command: celery -A greenbridge beat -l info
    volumes:
      - ./:/app
    env_file: ./.env
    depends_on:
      - db
      - redis
      - celery
    networks:
      - greenbridge_network

  # Channels Layer for Websockets
  channels:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    image: greenbridge_channels:latest
    restart: unless-stopped
    command: daphne -b 0.0.0.0 -p 8001 greenbridge.asgi:application
    volumes:
      - ./:/app
    env_file: ./.env
    depends_on:
      - db
      - redis
    networks:
      - greenbridge_network

  # Database (PostgreSQL + PostGIS)
  db:
    image: postgis/postgis:15-3.3-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file: ./.env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    networks:
      - greenbridge_network

  # Redis for Cache, Channels, and Celery Broker
  redis:
    image: redis:7.0-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - greenbridge_network

  # Nginx for Static Files and Routing
  nginx:
    image: nginx:1.25-alpine
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./docker/nginx/certbot/conf:/etc/letsencrypt
      - ./docker/nginx/certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - channels
    networks:
      - greenbridge_network

  # Vector Database for AI Search
  vector_db:
    image: redis/redis-stack:latest
    restart: unless-stopped
    volumes:
      - vector_data:/data
    environment:
      - REDIS_ARGS=--requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
      - "8001:8001"
    networks:
      - greenbridge_network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    restart: unless-stopped
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - greenbridge_network
    
  # Grafana for Visualization
  grafana:
    image: grafana/grafana:10.0.3
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - greenbridge_network

networks:
  greenbridge_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  prometheus_data:
  grafana_data:
  vector_data: 